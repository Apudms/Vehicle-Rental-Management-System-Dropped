// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace VehicleRentalApi.Models;

public partial class VehicleRentalContext : DbContext
{
    public VehicleRentalContext()
    {
    }

    public VehicleRentalContext(DbContextOptions<VehicleRentalContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Rental> Rentals { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=VehicleRental;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.InvoiceId).HasName("PK__Invoices__D796AAD50423909B");

            entity.Property(e => e.InvoiceId).IsFixedLength();
            entity.Property(e => e.Riid).IsFixedLength();

            entity.HasOne(d => d.Ri).WithOne(p => p.Invoice).HasConstraintName("FK__Invoices__RIID__44CA3770");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payments__9B556A587C4C0664");

            entity.Property(e => e.PaymentId).IsFixedLength();
            entity.Property(e => e.Ipid).IsFixedLength();

            entity.HasOne(d => d.Ip).WithOne(p => p.Payment).HasConstraintName("FK__Payments__IPID__540C7B00");
        });

        modelBuilder.Entity<Rental>(entity =>
        {
            entity.HasKey(e => e.RentalId).HasName("PK__Rentals__970059636DA3A0B3");

            entity.Property(e => e.RentalId).IsFixedLength();
            entity.Property(e => e.VehicleId).IsFixedLength();

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Rentals)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Rentals__Vehicle__3864608B");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CCAC7D4A2580");

            entity.Property(e => e.NoTelp).IsFixedLength();
            entity.Property(e => e.Password).IsFixedLength();

            entity.HasMany(d => d.Rentals).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "RentalUser",
                    r => r.HasOne<Rental>().WithMany()
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__RentalUse__Renta__4C6B5938"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__RentalUse__UserI__4B7734FF"),
                    j =>
                    {
                        j.HasKey("UserId", "RentalId").HasName("PK__RentalUs__3EF8C93AC559AC18");
                        j.ToTable("RentalUser");
                        j.IndexerProperty<int>("UserId").HasColumnName("UserID");
                        j.IndexerProperty<string>("RentalId")
                            .HasMaxLength(6)
                            .IsUnicode(false)
                            .IsFixedLength()
                            .HasColumnName("RentalID");
                    });
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.VehicleId).HasName("PK__Vehicles__476B54B24C452284");

            entity.Property(e => e.VehicleId).IsFixedLength();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}